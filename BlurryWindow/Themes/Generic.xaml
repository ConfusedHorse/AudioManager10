<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:p="clr-namespace:BlurryControls.Properties"
                    xmlns:windows="clr-namespace:BlurryControls.Windows"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <!-- 
    this ResourceDictionary includes styles to achieve a basic visual and functional Window 
    similar to the default style 
    
    to inherit from BlurryWindow it is necessary to use styles and templates because WPF does 
    not allow inheritance of base controls created by using XAML 
    
    following styles are applied by C# function 
        FrameworkElement.StyleProperty.OverrideMetadata(typeof(CONTROLIDENTIFIER), 
        new FrameworkPropertyMetadata(TryFindResource(typeof(CONTROLIDENTIFIER))));
    whereat CONTROLIDENTIFIER is the name of the new base control
    
    you can read more about that on: (2016/08)
    https://blog.magnusmontin.net/2013/03/16/how-to-create-a-custom-window-in-wpf/
    -->
    
    <!-- style for a button which slowly turns white when hovering the cursor over it -->
    <Style x:Key="WindowButtonGeneralStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="#00000000" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Button.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="#66FFFFFF"
                                        Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                                        FillBehavior="HoldEnd"
                                        Duration="0:0:0.5" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="#00000000"
                                        Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                                        FillBehavior="Stop"
                                        Duration="0:0:1" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- style for a button which slowly turns red when hovering the cursor over it -->
    <Style x:Key="WindowButtonExitStyle" TargetType="Button" BasedOn="{StaticResource WindowButtonGeneralStyle}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Button.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="#AAFF0000"
                                        Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                                        FillBehavior="HoldEnd"
                                        Duration="0:0:0.5" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="#00000000"
                                        Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                                        FillBehavior="Stop"
                                        Duration="0:0:1" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- style for a centered image of size 16 -->
    <Style x:Key="WindowImageStyle" TargetType="Image">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Height" Value="16" />
    </Style>

    <!-- style for a transparent rectangle -->
    <Style x:Key="WindowBorderGrab" TargetType="Rectangle">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Fill" Value="Transparent" />
    </Style>

    <!-- size of the grabable area of transparent border rectangles --> 
    <system:Double x:Key="BorderWeight">5</system:Double>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <!-- style for the graphical representation of a custom window base -->
    <Style TargetType="{x:Type windows:BlurryWindowBase}">
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:BlurryWindowBase}">
                    <!-- 
                    setting the Template property overwrites all window elements which have to be redefined
                    
                    this is a list of all standard window elements:
                        _application icon
                        _minimize button
                        _maximize button
                        _close button
                        _title bar
                        _window border                    
                    
                    this is a list of all standard window functionality:
                        _resizing on window edges
                        _resizing on window corners
                        _double click title bar window maximize
                        _double click title bar on maximized window return to normal size
                        _left click window icon shows system menu (not implemented here)
                        _double click window icon closes window
                        _right click title bar shows system menu
                        _left click held on title bar allows the window to be dragged
                        _left click held on window borders allows horizontal or vertical resizing
                        _left click held on window corners allows horizontal and vertical resizing
                    
                    this list was found on: (2016/08)
                    https://code.msdn.microsoft.com/WPF-styling-a-Window-in-fcf4e4ce
                    -->
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <!-- MenuBar with animated background and buttons, an icon, ContextMenu and a caption -->
                        <Grid x:Name="MenuBar"
                              Grid.Row="0"
                              Height="37"
                              Background="#00000000"
                              HorizontalAlignment="Stretch"
                              Visibility="{TemplateBinding IsMenuBarVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Grid.ContextMenu>
                                <!-- 
                                ContextMenu providing basic window functions such as:
                                    _minimize
                                    _restore
                                    _maximize
                                    _close
                                -->
                                <ContextMenu x:Name="ContextMenuForBlurryControl">
                                    <!-- Minimize -->
                                    <MenuItem x:Name="MinimizeContextMenuItem"
                                              Header="{x:Static p:Resources.Minimize}">
                                        <MenuItem.Icon>
                                            <Image Source="/BlurryControls;component/Resources/Icons/032/minimize_b.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <!-- Restore -->
                                    <MenuItem x:Name="RestoreContextMenuItem"
                                              Header="{x:Static p:Resources.Restore}">
                                        <MenuItem.Icon>
                                            <Image Source="/BlurryControls;component/Resources/Icons/032/restore_b.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <!-- Maximize -->
                                    <MenuItem x:Name="MaximizeContextMenuItem"
                                              Header="{x:Static p:Resources.Maximize}">
                                        <MenuItem.Icon>
                                            <Image Source="/BlurryControls;component/Resources/Icons/032/maximize_b.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <!-- Close -->
                                    <MenuItem x:Name="CloseContextMenuItem"
                                              Header="{x:Static p:Resources.Close}">
                                        <MenuItem.Icon>
                                            <Image Source="/BlurryControls;component/Resources/Icons/032/close_b.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </Grid.ContextMenu>
                            <Grid.Triggers>
                                <!-- 
                                this is not part of the standard window 
                                following triggers control the visual (calming) behaviour for the ManuBar
                                -->
                                <EventTrigger RoutedEvent="Grid.MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="#66000000"
                                                            Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)"
                                                            FillBehavior="HoldEnd"
                                                            Duration="0:0:1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="Grid.MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="#00000000"
                                                            Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)"
                                                            FillBehavior="Stop"
                                                            Duration="0:0:1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Grid.Triggers>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="37" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="149" />
                            </Grid.ColumnDefinitions>

                            <!-- StackPanel with Window Icon -->
                            <StackPanel x:Name="LeftPanel"
                                        Grid.Column="0"
                                        Margin="5,5,0,0"
                                        VerticalAlignment="Stretch"
                                        Orientation="Horizontal">

                                <!-- Window Icon -->
                                <Image x:Name="TitleImage"
                                       Margin="2 2 6 6"
                                       Source="{TemplateBinding Icon}"
                                       Height="24"
                                       Width="24" />
                            </StackPanel>

                            <!-- Window Title -->
                            <TextBlock x:Name="TitleTextBlock"
                                       Grid.Column="1"
                                       Margin="0 5"
                                       Background="Transparent"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="20"
                                       FontFamily="Segoe UI"
                                       Text="{TemplateBinding Title}"
                                       Foreground="{TemplateBinding Foreground}" />

                            <!-- StackPanel with Window Buttons -->
                            <StackPanel x:Name="RightPanel"
                                        Grid.Column="2"
                                        Margin="0 5 5 0"
                                        VerticalAlignment="Stretch"
                                        Orientation="Horizontal">

                                <!-- Minimize -->
                                <Button x:Name="MinimizeButton"
                                        Style="{StaticResource WindowButtonGeneralStyle}"
                                        ToolTip="{x:Static p:Resources.Minimize}">
                                    <Image Style="{StaticResource WindowImageStyle}"
                                           Source="/BlurryControls;component/Resources/Icons/032/minimize.png" />
                                </Button>

                                <!-- Maximize / Restore -->
                                <Button x:Name="MaximizeRestoreButton">
                                    <Button.Style>
                                        <Style TargetType="Button" BasedOn="{StaticResource WindowButtonGeneralStyle}">
                                            <Setter Property="ToolTip" Value="{x:Static p:Resources.Maximize}" />
                                            <Style.Triggers>
                                                <DataTrigger
                                                    Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type windows:BlurryWindowBase}}}"
                                                    Value="Normal">
                                                    <Setter Property="ToolTip" Value="{x:Static p:Resources.Maximize}" />
                                                </DataTrigger>
                                                <DataTrigger
                                                    Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type windows:BlurryWindowBase}}}"
                                                    Value="Maximized">
                                                    <Setter Property="ToolTip" Value="{x:Static p:Resources.Restore}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                    <Image>
                                        <Image.Style>
                                            <Style TargetType="Image" BasedOn="{StaticResource WindowImageStyle}">
                                                <Setter Property="Source"
                                                        Value="/BlurryControls;component/Resources/Icons/032/maximize.png" />
                                                <Style.Triggers>
                                                    <DataTrigger
                                                        Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type windows:BlurryWindowBase}}}"
                                                        Value="Normal">
                                                        <Setter Property="Source"
                                                                Value="/BlurryControls;component/Resources/Icons/032/maximize.png" />
                                                    </DataTrigger>
                                                    <DataTrigger
                                                        Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type windows:BlurryWindowBase}}}"
                                                        Value="Maximized">
                                                        <Setter Property="Source"
                                                                Value="/BlurryControls;component/Resources/Icons/032/restore.png" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>
                                </Button>

                                <!-- Maximize -->
                                <Button x:Name="CloseButton"
                                        Style="{StaticResource WindowButtonExitStyle}"
                                        ToolTip="{x:Static p:Resources.Close}">
                                    <Image Style="{StaticResource WindowImageStyle}"
                                           Source="/BlurryControls;component/Resources/Icons/032/close.png" />
                                </Button>
                            </StackPanel>
                        </Grid>

                        <!-- here goes the content -->
                        <AdornerDecorator Grid.Row="1">
                            <ContentPresenter />
                        </AdornerDecorator>

                        <!-- 
                        BorderControl implements a transparent border made from 8 rectangles 
                        which redefines the resize functionality of the Window 
                        constant BorderWeight sets the thickness of said border
                        -->
                        <Grid x:Name="BorderControl"
                              Grid.Row="0"
                              Grid.RowSpan="2"
                              Visibility="{TemplateBinding IsResizable, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Rectangle Tag="Left"
                                       Margin="0 5"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Stretch"
                                       HorizontalAlignment="Left"
                                       Width="{StaticResource BorderWeight}"
                                       Cursor="SizeWE" />
                            <Rectangle Tag="TopLeft"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Top"
                                       HorizontalAlignment="Left"
                                       Width="{StaticResource BorderWeight}"
                                       Height="{StaticResource BorderWeight}"
                                       Cursor="SizeNWSE" />
                            <Rectangle Tag="Top"
                                       Margin="5 0"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Top"
                                       HorizontalAlignment="Stretch"
                                       Height="{StaticResource BorderWeight}"
                                       Cursor="SizeNS" />
                            <Rectangle Tag="TopRight"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Top"
                                       HorizontalAlignment="Right"
                                       Width="{StaticResource BorderWeight}"
                                       Height="{StaticResource BorderWeight}"
                                       Cursor="SizeNESW" />
                            <Rectangle Tag="Right"
                                       Margin="0 5"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Stretch"
                                       HorizontalAlignment="Right"
                                       Width="{StaticResource BorderWeight}"
                                       Cursor="SizeWE" />
                            <Rectangle Tag="BottomRight"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Bottom"
                                       HorizontalAlignment="Right"
                                       Width="{StaticResource BorderWeight}"
                                       Height="{StaticResource BorderWeight}"
                                       Cursor="SizeNWSE" />
                            <Rectangle Tag="Bottom"
                                       Margin="5 0"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Bottom"
                                       HorizontalAlignment="Stretch"
                                       Height="{StaticResource BorderWeight}"
                                       Cursor="SizeNS" />
                            <Rectangle Tag="BottomLeft"
                                       Style="{StaticResource WindowBorderGrab}"
                                       VerticalAlignment="Bottom"
                                       HorizontalAlignment="Left"
                                       Width="{StaticResource BorderWeight}"
                                       Height="{StaticResource BorderWeight}"
                                       Cursor="SizeNESW" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
    style for the graphical representation of a custom tray base 
    the BlurryTraybase can be used for both representing system global information
    in the form of an overlay in the bottom right corner of the work space or
    as a temporary control which implements functionality and is called by a tray icon
    
    for information purposes a Duration may be set
    or as a tray control Duration be set to 0 which disables automatic closing
    -->
    <Style TargetType="{x:Type windows:BlurryTrayBase}">
        <Setter Property="Width" Value="300" /> <!-- default -->
        <Setter Property="Height" Value="500" /> <!-- default -->
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="Topmost" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:BlurryTrayBase}">
                    <Grid Background="{TemplateBinding Background}">
                        <!-- content goes here -->
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>